name: Deploy Feature Branch to Fargate

on:
  push:
    branches:
      - 'feature'
      - 'feature/*'
      - 'feature-[0-9]*'

jobs:
  build-and-deploy-feature-to-fargate:
    runs-on: ubuntu-latest

    steps:
    # Checkout the code from the repository
    - name: Checkout Code
      uses: actions/checkout@v2

    # Configure AWS credentials for the workflow
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    # Login to Amazon ECR
    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 222222222222.dkr.ecr.us-east-1.amazonaws.com

    # Build the Docker image
    - name: Build Docker Image
      run: |
        BRANCH_NAME=${GITHUB_REF##*/}
        echo "Branch name: $BRANCH_NAME"
        docker build -t feature .

    # Tag the Docker image with the branch name
    - name: Tag Docker Image
      run: |
        BRANCH_NAME=${GITHUB_REF##*/}
        IMAGE_TAG="${BRANCH_NAME}"
        docker tag feature:latest 222222222222.dkr.ecr.us-east-1.amazonaws.com/feature:${IMAGE_TAG}

    # Push the Docker image to ECR
    - name: Push Docker Image to ECR
      run: |
        BRANCH_NAME=${GITHUB_REF##*/}
        IMAGE_TAG="${BRANCH_NAME}"
        docker push 222222222222.dkr.ecr.us-east-1.amazonaws.com/feature:${IMAGE_TAG}

    # Debugging step to print environment variables
    - name: Debug Environment Variables
      run: |
        BRANCH_NAME=${GITHUB_REF##*/}
        IMAGE_TAG=$(echo $BRANCH_NAME | tr '/:' '-')
        echo "BRANCH_NAME=${BRANCH_NAME}"
        echo "IMAGE_TAG=${IMAGE_TAG}"
        echo "Replacing IMAGE_PLACEHOLDER with 222222222222.dkr.ecr.us-east-1.amazonaws.com/feature:${IMAGE_TAG}"

    # Update the ECS task definition with the new Docker image
    - name: Update ECS Task Definition with New Image
      run: |
        BRANCH_NAME=${GITHUB_REF##*/}
        IMAGE_TAG="${BRANCH_NAME}"
        sed "s|IMAGE_PLACEHOLDER|222222222222.dkr.ecr.us-east-1.amazonaws.com/feature:${IMAGE_TAG}|g" task-def-template.json > task-def-updated.json
        cat task-def-updated.json
        aws ecs register-task-definition --cli-input-json file://task-def-updated.json

    # Placeholder for the ECS deployment steps
    - name: Deploy Updated Task Definition to ECS
      run: echo "Starting ECS Deployment Steps"

    # Set the cluster and service names
    - name: Set Cluster and Service Names
      run: |
        CLUSTER_NAME="feature"
        BRANCH_NAME=${GITHUB_REF##*/}
        SERVICE_NAME="feature-$BRANCH_NAME"
        echo "Deploying to ECS service $SERVICE_NAME"
        echo "CLUSTER_NAME=${CLUSTER_NAME}" >> $GITHUB_ENV
        echo "SERVICE_NAME=${SERVICE_NAME}" >> $GITHUB_ENV

    # Check if the ECS cluster exists
    - name: Check if Cluster Exists
      run: |
        CLUSTER_STATUS=$(aws ecs describe-clusters --clusters $CLUSTER_NAME --query 'clusters[0].status' --output text || echo "MISSING")
        if [ "$CLUSTER_STATUS" == "MISSING" ]; then
          echo "Error: ECS cluster $CLUSTER_NAME not found."
          exit 1
        fi

    # Get the latest task definition ARN
    - name: Get Latest Task Definition ARN
      run: |
        TASK_DEFINITION_ARN=$(aws ecs describe-task-definition --task-definition feature --query 'taskDefinition.taskDefinitionArn' --output text)
        echo "Task Definition ARN: $TASK_DEFINITION_ARN"
        echo "TASK_DEFINITION_ARN=${TASK_DEFINITION_ARN}" >> $GITHUB_ENV

    # Check if the ECS service exists
    - name: Check if ECS Service Exists
      run: |
        SERVICE_STATUS=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query 'services[0].status' --output text || echo "MISSING")
        echo "Service Status: $SERVICE_STATUS"
        echo "SERVICE_STATUS=${SERVICE_STATUS}" >> $GITHUB_ENV

    # Create or update the ECS service
    - name: Create or Update ECS Service
      run: |
        if [ "$SERVICE_STATUS" == "MISSING" ] || [ -z "$SERVICE_STATUS" ] || [ "$SERVICE_STATUS" == "None" ]; then
          echo "Creating ECS service $SERVICE_NAME"
          aws ecs create-service \
            --cluster $CLUSTER_NAME \
            --service-name $SERVICE_NAME \
            --task-definition $TASK_DEFINITION_ARN \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-01d6b310125eeafbc,subnet-038b6260f860123c2],securityGroups=[sg-04bc3b1e571250439],assignPublicIp=ENABLED}"
        else
          echo "Service $SERVICE_NAME already exists, updating the service"
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition $TASK_DEFINITION_ARN \
            --desired-count 1
        fi