name: Deploy Feature Branch to Fargate

on:
  push:
    branches:
      - 'feature'
      - 'feature/*'
      - 'feature-[0-9]*'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 975622744795.dkr.ecr.us-east-1.amazonaws.com

    - name: Build, tag, and push Docker image to Amazon ECR
      run: |
        BRANCH_NAME=${GITHUB_REF##*/}
        echo "Branch name: $BRANCH_NAME"
        IMAGE_TAG="${BRANCH_NAME}"
        docker build -t feature .
        docker tag feature:latest 975622744795.dkr.ecr.us-east-1.amazonaws.com/feature:${IMAGE_TAG}
        docker push 975622744795.dkr.ecr.us-east-1.amazonaws.com/feature:${IMAGE_TAG}

    - name: Debug Environment Variables
      run: |
        BRANCH_NAME=${GITHUB_REF##*/}
        IMAGE_TAG=$(echo $BRANCH_NAME | tr '/:' '-')
        echo "BRANCH_NAME=${BRANCH_NAME}"
        echo "IMAGE_TAG=${IMAGE_TAG}"
        echo "Replacing IMAGE_PLACEHOLDER with 975622744795.dkr.ecr.us-east-1.amazonaws.com/feature:${IMAGE_TAG}"

    - name: Update ECS Task Definition
      run: |
        BRANCH_NAME=${GITHUB_REF##*/}
        IMAGE_TAG="${BRANCH_NAME}"
        sed "s|IMAGE_PLACEHOLDER|975622744795.dkr.ecr.us-east-1.amazonaws.com/feature:${IMAGE_TAG}|g" task-def-template.json > task-def-updated.json
        cat task-def-updated.json
        aws ecs register-task-definition --cli-input-json file://task-def-updated.json

    - name: Deploy to Fargate
      run: |
        CLUSTER_NAME="feature"
        BRANCH_NAME=${GITHUB_REF##*/}
        SERVICE_NAME="feature-$BRANCH_NAME"
        echo "Deploying to ECS service $SERVICE_NAME"

        # Check if the cluster exists
        CLUSTER_STATUS=$(aws ecs describe-clusters --clusters $CLUSTER_NAME --query 'clusters[0].status' --output text || echo "MISSING")
        if [ "$CLUSTER_STATUS" == "MISSING" ]; then
          echo "Error: ECS cluster $CLUSTER_NAME not found."
          exit 1
        fi

        # Get the latest revision of the task definition
        TASK_DEFINITION_ARN=$(aws ecs describe-task-definition --task-definition feature --query 'taskDefinition.taskDefinitionArn' --output text)

        # Check if the service already exists
        SERVICE_STATUS=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query 'services[0].status' --output text || echo "MISSING")

        if [ "$SERVICE_STATUS" == "MISSING" ]; then
          echo "Creating ECS service $SERVICE_NAME"
          aws ecs create-service \
            --cluster $CLUSTER_NAME \
            --service-name $SERVICE_NAME \
            --task-definition $TASK_DEFINITION_ARN \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-12345],securityGroups=[sg-12345],assignPublicIp=ENABLED}"
        else
          echo "Service $SERVICE_NAME already exists, updating the service"
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition $TASK_DEFINITION_ARN \
            --desired-count 1
        fi
